---
#https://aws.amazon.com/free/
Description: EC2 - nookr.io compute
Parameters:
  InstanceRole:
    Type: String
  ImageId:
    Type: String
  InstanceType:
    Type: String
  KeyName:
    Type: String
  SecurityGroups:
    Type: List<String>
  SubnetIds:
    Type: List<String>
  ProjectName:
    Type: String
  VolumeId:
    Type: String

Resources:
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole
      InstanceProfileName: !Sub "${AWS::StackName}-instance-profile"

  Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ImageId
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroupIds: !Ref SecurityGroups
      SubnetId: !Select [ 0, !Ref SubnetIds ]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}"
      Volumes:
      - Device: /dev/xvdf
        VolumeId: !Ref VolumeId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v \
            --stack ${AWS::StackName} \
            --resource Instance \
            --configsets install \
            --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          install:
          - config_cfn
          - install_logs
          - config_ecs
          - config_volume
        config_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                tiggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
        install_logs:
          packages:
            yum: {
              awslogs: []
            }
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs

                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/awslogs/state/agent-state
                use_gzip_http_content_encoding = true

                [/var/log/cron]
                file = /var/log/cron
                log_group_name = ${ProjectName}-unix
                log_stream_name = {instance_id}-cron
                datetime_format = %b %d %H:%M:%S

                [/var/log/docker]
                file = /var/log/docker
                log_group_name = ${ProjectName}-unix
                log_stream_name = {instance_id}-docker
                datetime_format = %b %d %H:%M:%S

                [/var/log/ecs/ecs-agent.log]
                file = /var/log/ecs/ecs-agent.log*
                log_group_name = ${ProjectName}-unix
                log_stream_name = {instance_id}-ecs-agent
                datetime_format = %b %d %H:%M:%S

                [/var/log/ecs/ecs-init.log]
                file = /var/log/ecs/ecs-init.log
                log_group_name = ${ProjectName}-unix
                log_stream_name = {instance_id}-ecs-init
                datetime_format = %b %d %H:%M:%S

                [/var/log/audit/audit.log]
                file = /var/log/audit/audit.log
                log_group_name = ${ProjectName}-unix
                log_stream_name = {instance_id}-audit
                datetime_format = %b %d %H:%M:%S

                [/var/log/messages]
                file = /var/log/messages
                log_group_name = ${ProjectName}-unix
                log_stream_name = {instance_id}-messages
                datetime_format = %b %d %H:%M:%S

                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = ${ProjectName}-unix
                log_stream_name = {instance_id}-dmesg
                datetime_format = %b %d %H:%M:%S

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${ProjectName}-unix
                log_stream_name = {instance_id}-cloud-init
                datetime_format = %b %d %H:%M:%S

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${ProjectName}-unix
                log_stream_name = {instance_id}-cloud-init-output
                datetime_format = %b %d %H:%M:%S

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${ProjectName}-unix
                log_stream_name = {instance_id}-cfn-init
                datetime_format = %b %d %H:%M:%S

                [/var/log/cfn-hup.log]
                file = /var/log/cfn-hup.log
                log_group_name = ${ProjectName}-unix
                log_stream_name = {instance_id}-cfn-hup
                datetime_format = %b %d %H:%M:%S

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${ProjectName}-unix
                log_stream_name = {instance_id}-cfn-wire
                datetime_format = %b %d %H:%M:%S
          commands:
            01_create_state_directory:
              command: |
                mkdir -p /var/awslogs/state
                chown -R ec2-user:ec2-user /var/awslogs
                service awslogs start
        config_ecs:
          commands:
            01_add_instance_to_cluster:
              command: !Sub |
                #!/bin/bash -xe
                echo "ECS_CLUSTER=${ProjectName}" > /etc/ecs/ecs.config
                echo ECS_AVAILABLE_LOGGING_DRIVERS='["json-file","awslogs"]' >> /etc/ecs/ecs.config
        config_volume:
          commands:
            01_mount_ebs:
              command: !Sub |
                #!/bin/bash
                file_info=$(file -s "/dev/xvdf")
                if [ "$file_info" == "/dev/xvdf: data" ]
                then
                  mkfs -t ext4 /dev/xvdf
                fi

                fstab_exists=$(cat /etc/fstab | grep nookr)
                if [ ! -n "$fstab_exists" ]
                then
                  mkdir -p /var/nookr
                  uuid=$(file -s /dev/xvdf | awk '{print $8}')
                  echo "$uuid /var/nookr  ext4 defaults,nofail 0 2" >> /etc/fstab
                  mount -a
                fi

  IpAddress:
    Type: "AWS::EC2::EIP"
    Properties:
      InstanceId: !Ref Instance

Outputs:
  IpAddress:
    Value: !Ref IpAddress
    Export:
      Name: !Sub "${AWS::StackName}::IpAddress"
